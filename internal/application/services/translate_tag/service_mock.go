// Code generated by mockery v2.50.0. DO NOT EDIT.

package translate_tag

import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// HandleTranslation provides a mock function with given fields: input
func (_m *MockService) HandleTranslation(input interface{}) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for HandleTranslation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_HandleTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleTranslation'
type MockService_HandleTranslation_Call struct {
	*mock.Call
}

// HandleTranslation is a helper method to define mock.On call
//   - input interface{}
func (_e *MockService_Expecter) HandleTranslation(input interface{}) *MockService_HandleTranslation_Call {
	return &MockService_HandleTranslation_Call{Call: _e.mock.On("HandleTranslation", input)}
}

func (_c *MockService_HandleTranslation_Call) Run(run func(input interface{})) *MockService_HandleTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockService_HandleTranslation_Call) Return(_a0 error) *MockService_HandleTranslation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_HandleTranslation_Call) RunAndReturn(run func(interface{}) error) *MockService_HandleTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// SetLang provides a mock function with given fields: fromLang, toLang
func (_m *MockService) SetLang(fromLang string, toLang string) {
	_m.Called(fromLang, toLang)
}

// MockService_SetLang_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLang'
type MockService_SetLang_Call struct {
	*mock.Call
}

// SetLang is a helper method to define mock.On call
//   - fromLang string
//   - toLang string
func (_e *MockService_Expecter) SetLang(fromLang interface{}, toLang interface{}) *MockService_SetLang_Call {
	return &MockService_SetLang_Call{Call: _e.mock.On("SetLang", fromLang, toLang)}
}

func (_c *MockService_SetLang_Call) Run(run func(fromLang string, toLang string)) *MockService_SetLang_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockService_SetLang_Call) Return() *MockService_SetLang_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockService_SetLang_Call) RunAndReturn(run func(string, string)) *MockService_SetLang_Call {
	_c.Run(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
