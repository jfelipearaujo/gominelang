// Code generated by mockery v2.50.0. DO NOT EDIT.

package dbhash

import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockService_Expecter) Close() *MockService_Close_Call {
	return &MockService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockService_Close_Call) Run(run func()) *MockService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Close_Call) Return(_a0 error) *MockService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Close_Call) RunAndReturn(run func() error) *MockService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Compare provides a mock function with given fields: fileHash, compareTo
func (_m *MockService) Compare(fileHash *FileHash, compareTo string) (bool, error) {
	ret := _m.Called(fileHash, compareTo)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*FileHash, string) (bool, error)); ok {
		return rf(fileHash, compareTo)
	}
	if rf, ok := ret.Get(0).(func(*FileHash, string) bool); ok {
		r0 = rf(fileHash, compareTo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*FileHash, string) error); ok {
		r1 = rf(fileHash, compareTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockService_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - fileHash *FileHash
//   - compareTo string
func (_e *MockService_Expecter) Compare(fileHash interface{}, compareTo interface{}) *MockService_Compare_Call {
	return &MockService_Compare_Call{Call: _e.mock.On("Compare", fileHash, compareTo)}
}

func (_c *MockService_Compare_Call) Run(run func(fileHash *FileHash, compareTo string)) *MockService_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*FileHash), args[1].(string))
	})
	return _c
}

func (_c *MockService_Compare_Call) Return(_a0 bool, _a1 error) *MockService_Compare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Compare_Call) RunAndReturn(run func(*FileHash, string) (bool, error)) *MockService_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: filePath
func (_m *MockService) Exists(filePath string) (*FileHash, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *FileHash
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*FileHash, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) *FileHash); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FileHash)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockService_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - filePath string
func (_e *MockService_Expecter) Exists(filePath interface{}) *MockService_Exists_Call {
	return &MockService_Exists_Call{Call: _e.mock.On("Exists", filePath)}
}

func (_c *MockService_Exists_Call) Run(run func(filePath string)) *MockService_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_Exists_Call) Return(_a0 *FileHash, _a1 error) *MockService_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Exists_Call) RunAndReturn(run func(string) (*FileHash, error)) *MockService_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with no fields
func (_m *MockService) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockService_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *MockService_Expecter) Open() *MockService_Open_Call {
	return &MockService_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *MockService_Open_Call) Run(run func()) *MockService_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Open_Call) Return(_a0 error) *MockService_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Open_Call) RunAndReturn(run func() error) *MockService_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: filePath
func (_m *MockService) Store(filePath string) error {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockService_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - filePath string
func (_e *MockService_Expecter) Store(filePath interface{}) *MockService_Store_Call {
	return &MockService_Store_Call{Call: _e.mock.On("Store", filePath)}
}

func (_c *MockService_Store_Call) Run(run func(filePath string)) *MockService_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_Store_Call) Return(_a0 error) *MockService_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Store_Call) RunAndReturn(run func(string) error) *MockService_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
