// Code generated by mockery v2.50.0. DO NOT EDIT.

package translate

import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// FixWrongTranslation provides a mock function with given fields: original, translated
func (_m *MockService) FixWrongTranslation(original string, translated string) string {
	ret := _m.Called(original, translated)

	if len(ret) == 0 {
		panic("no return value specified for FixWrongTranslation")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(original, translated)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_FixWrongTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FixWrongTranslation'
type MockService_FixWrongTranslation_Call struct {
	*mock.Call
}

// FixWrongTranslation is a helper method to define mock.On call
//   - original string
//   - translated string
func (_e *MockService_Expecter) FixWrongTranslation(original interface{}, translated interface{}) *MockService_FixWrongTranslation_Call {
	return &MockService_FixWrongTranslation_Call{Call: _e.mock.On("FixWrongTranslation", original, translated)}
}

func (_c *MockService_FixWrongTranslation_Call) Run(run func(original string, translated string)) *MockService_FixWrongTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockService_FixWrongTranslation_Call) Return(_a0 string) *MockService_FixWrongTranslation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_FixWrongTranslation_Call) RunAndReturn(run func(string, string) string) *MockService_FixWrongTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// Translate provides a mock function with given fields: from, to, text
func (_m *MockService) Translate(from string, to string, text string) (string, error) {
	ret := _m.Called(from, to, text)

	if len(ret) == 0 {
		panic("no return value specified for Translate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(from, to, text)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(from, to, text)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(from, to, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Translate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Translate'
type MockService_Translate_Call struct {
	*mock.Call
}

// Translate is a helper method to define mock.On call
//   - from string
//   - to string
//   - text string
func (_e *MockService_Expecter) Translate(from interface{}, to interface{}, text interface{}) *MockService_Translate_Call {
	return &MockService_Translate_Call{Call: _e.mock.On("Translate", from, to, text)}
}

func (_c *MockService_Translate_Call) Run(run func(from string, to string, text string)) *MockService_Translate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_Translate_Call) Return(_a0 string, _a1 error) *MockService_Translate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Translate_Call) RunAndReturn(run func(string, string, string) (string, error)) *MockService_Translate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
